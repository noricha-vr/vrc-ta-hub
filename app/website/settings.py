"""
Django settings for website project.

Generated by 'django-admin startproject' using Django 4.2.4.

For more information on this file, see
https://docs.djangoproject.com/en/4.2/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/4.2/ref/settings/
"""
import os
import sys
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent

# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/4.2/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = os.environ.get('SECRET_KEY')

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = os.environ.get('DEBUG') == 'True'

ALLOWED_HOSTS = ['vrc-ta-hub.com', os.environ.get('HTTP_HOST')]
CSRF_TRUSTED_ORIGINS = ['https://vrc-ta-hub.com', os.environ.get('CSRF_TRUSTED_ORIGIN')]
# Application definition

INSTALLED_APPS = [
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'ta_hub',
    'community',
    'event',
    'sitemap',
    'account',
    'event_calendar',
    'twitter',
    'django_bootstrap5',
    'api_v1',
    'django_filters',
    'rest_framework',
]

AUTH_USER_MODEL = 'account.CustomUser'

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
]

ROOT_URLCONF = 'website.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'website.wsgi.application'

# Database
# https://docs.djangoproject.com/en/4.2/ref/settings/#databases

DATABASES = {
    'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': os.environ.get('DB_NAME'),
        'USER': os.environ.get('DB_USER'),
        'PASSWORD': os.environ.get('DB_PASSWORD'),
        'HOST': os.environ.get('DB_HOST'),
        'OPTIONS': {
            'charset': 'utf8mb4',
            'init_command': "SET sql_mode='STRICT_TRANS_TABLES'",
        },
    },
}

if 'test' in sys.argv:
    DATABASES['default'] = {
        'ENGINE': 'django.db.backends.sqlite3',
        'NAME': 'test_db.sqlite3',
    }

print('DB_NAME ' + DATABASES['default']['NAME'])

# Password validation
# https://docs.djangoproject.com/en/4.2/ref/settings/#auth-password-validators

FILE_UPLOAD_MAX_MEMORY_SIZE = 30 * 1024 * 1024  # 30MB

AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/4.2/topics/i18n/

LANGUAGE_CODE = 'ja-jp'

TIME_ZONE = 'Asia/Tokyo'

USE_I18N = True

USE_TZ = True

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/4.2/howto/static-files/

STATIC_URL = 'static/'

# Default primary key field type
# https://docs.djangoproject.com/en/4.2/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = 'django.db.models.BigAutoField'
STATIC_ROOT = os.path.join(BASE_DIR, 'static')  # ローカルに静的ファイルを収集するディレクトリ

LOGIN_URL = '/account/login/'

# Cloudflare R2の設定
AWS_ACCESS_KEY_ID = os.getenv('AWS_ACCESS_KEY_ID')
AWS_SECRET_ACCESS_KEY = os.getenv('AWS_SECRET_ACCESS_KEY')
AWS_STORAGE_BUCKET_NAME = os.getenv('AWS_STORAGE_BUCKET_NAME')
AWS_S3_ENDPOINT_URL = os.getenv('AWS_S3_ENDPOINT_URL')
AWS_S3_CUSTOM_DOMAIN = os.getenv('AWS_S3_CUSTOM_DOMAIN')
MEDIA_URL = f'{AWS_S3_ENDPOINT_URL}/{AWS_STORAGE_BUCKET_NAME}/'
# 静的ファイルとメディアファイルのストレージバックエンドを指定
STATICFILES_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'
DEFAULT_FILE_STORAGE = 'storages.backends.s3boto3.S3Boto3Storage'

# その他の設定
AWS_S3_FILE_OVERWRITE = False
AWS_QUERYSTRING_AUTH = False  # 認証付きのURLを生成しない

# Google API
GOOGLE_API_KEY = os.environ.get('GOOGLE_API_KEY')
assert GOOGLE_API_KEY is not None, 'Please set GOOGLE_API_KEY'
GEMINI_API_KEY = os.environ.get('GEMINI_API_KEY')
assert GEMINI_API_KEY is not None, 'Please set GEMINI_API_KEY'
CALENDAR_ID = os.environ.get('CALENDAR_ID')
assert CALENDAR_ID is not None, 'Please set CALENDAR_ID'
REQUEST_TOKEN = os.environ.get('REQUEST_TOKEN')
assert REQUEST_TOKEN is not None, 'Please set REQUEST_TOKEN'

# OpenAI API
OPENAI_API_KEY = os.environ.get('OPENAI_API_KEY')

LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'formatters': {
        'verbose': {
            'format': '[%(asctime)s] %(levelname)s [%(name)s:%(lineno)s] %(message)s',
            'datefmt': '%Y-%m-%d %H:%M:%S',
        },
        'simple': {
            'format': '%(levelname)s %(message)s'
        },
    },
    'handlers': {
        'console': {
            'level': 'INFO',
            'class': 'logging.StreamHandler',
            'formatter': 'simple',
        },
    },
    'loggers': {
        'django': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'event_detail': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'event': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'ta_hub': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'website': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'api_v1': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'community': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'account': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'sitemap': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'event_calendar': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
        'twitter': {
            'handlers': ['console'],
            'level': 'INFO',
            'propagate': True,
        },
    },
}
